{"version":3,"sources":["components/Alerts.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alerts","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","captalWord","msg","Navbar","mode","href","title","id","onClick","togglemode","htmlFor","placeholder","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3b4d93c9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    const captalWord = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{captalWord(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">About</a>\r\n              </li>\r\n            </ul>\r\n            <div className=\"form-check form-switch\">\r\n              <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className={`form-check-label mx-3 text-${props.mode==='light' ? 'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n            <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired}","import React ,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const changeUp = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppecase\",\"success\")\r\n    }\r\n    const changeLow = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n    const clearText =()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Cleared all Text\", \"danger\")\r\n    }\r\n    const handleCopy=()=>{\r\n        let text = document.getElementById(\"myTextBox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text COpied to ClipBoard\",\"success\")\r\n    }\r\n    const handleExtraSpace=()=>{\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className=\"conatainer\" style= {{color: props.mode ==='dark' ? 'white' :'#081849'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value= {text} style= {{backgroundColor: props.mode ==='dark' ? 'grey' :'white', color: props.mode ==='dark' ? 'white' :'#081849'}} onChange={handleOnChange} id=\"myTextBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {changeUp}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {changeLow}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {clearText}>Clear Text </button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleExtraSpace}>Remove Extra Spaces </button>\r\n        </div>\r\n        <div className=\"container my-3\" style= {{color: props.mode ==='dark' ? 'white' :'#081849'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.48*(text.split(\" \").length)/60} Minutes Average reading time</p>\r\n            <h2>Priview</h2>\r\n            <p>{text.length>0? text: \"Enter something to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\r\nimport { useState } from 'react';\r\nimport './App.css';\r\nimport Alerts from './components/Alerts';\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light')\r\n  const [alert, setAlert] = useState(null)\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n    }, 1000);\r\n  }\r\n\r\n  const togglemode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = '#081849';\r\n      showAlert(\"Dark Mode has been enabled\", \"success\")\r\n      document.title = 'TextUtils - Dark Mode'\r\n\r\n    }\r\n    else {\r\n      setMode(\"light\")\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode has been enabled\", \"success\")\r\n      document.title = 'TextUtils - Light Mode'\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n        <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} />\r\n        <Alerts alert={alert} />\r\n        <div className=\"container my-3\">\r\n              <TextForm heading=\"Enter your text here\" mode={mode} showAlert={showAlert} />\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}